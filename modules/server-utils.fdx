(in-module 'server-utils 'fdinternals)

(define (localize spec dir)
  (if (or (not dir) (not (string? spec))
	  (find #\@ spec) (eqv? (elt spec 0) #\/))
      spec
      (string-append dir "/" spec)))

(define (load-server-config filename base-dir)
  (let ((served-pools {}) (served-indices {}))
    (load-config filename)
    (control-frame-printing 0)
    (when (bound? portid) (set-port-id! portid))
    (when (and (bound? localhost) localhost) (use-localhost!))
    (when (and (bound? read-only) read-only) (set-read-only!))
    (when (bound? data)
      (set+! served-pools (use-pool (localize data base-dir)))
      (set+! served-indices (use-index (localize data base-dir))))
    (when (bound? pools)
      (set+! served-pools (use-pool (localize pools base-dir))))
    (when (bound? indices)
      (set+! served-indices (open-index (localize indices base-dir))))
    (cond ((not (bound? cache-indices)) (auto-cache-file-indices))
	  ((eq? cache-indices 'all)
	   (do-choices (index served-indices) 
	     (if (file-index? index) (cache-index index))))
	  (else (cache-index (open-index (localize cache-indices base-dir)))))
    (cond ((not (bound? cache-pools)) (auto-cache-file-pools))
	  ((eq? cache-pools 'all)
	   (do-choices (pool served-pools) 
	     (if (file-pool? pool) (cache-pool pool))))
	  (else (cache-pool (use-pool (localize cache-pools base-dir)))))
    (when (bound? index-preload)
      (if (eq? index-preload 'all)
	  (do-choices (index served-indices)
	    (if (file-index? index) (preload-file-index! index)))
	(do-choices (index-file index-preload)
	  (preload-file-index! (open-index (localize index-file base-dir))))))
    (serve-pool served-pools) (serve-index served-indices)))

(define server-config
  `(macro (expr)
     `(begin
	(load-server-config (get-component ,(get-arg expr 1))
			    (dirname (get-component "any")))
	(when (bound? modules) (use-module modules))
	(when (bound? exports) (module-export! exports)))))

(module-export! '{load-server-config server-config})