(in-module 'vpools '{fdinternals fdmaint index-plus osprims fdtext})

(define vpool-indices-table (make-hashtable))
(define vpool-pools-table (make-hashtable))

(define (get-base-form string)
  (tx-subst #({"/" ""}
	      (* #((char-not "/") "/"))
	      (isalnum+)
	      {"" (subst ".pool" "")})
	    string))

(define (vpool-indices vpool)
  (get vpool-indices-table vpool))
(define (vpool-pools vpool)
  (get vpool-pools-table vpool))

(define (guess-safety-margin vpool-spec)
  (let ((margin (* (max (quotient (pool-capacity vpool-spec) 1024)
			(quotient (pool-capacity vpool-spec) 512)
			(quotient (pool-capacity vpool-spec) 256)
			(quotient (pool-capacity vpool-spec) 128)
			(quotient (pool-capacity vpool-spec) 64)
			(quotient (pool-capacity vpool-spec) 32))
		   2)))
    (notify "Guessing the safety margin for " vpool-spec " to be " margin)
    margin))

(define (use-vpool vpool-spec (safety-spec #f) (repack #t))
  (notify "Using virtual pool " vpool-spec)
  (let* ((base-form (try (get-base-form vpool-spec)
			 vpool-spec))
	 (vpool-name (stringout base-form ".pool"))
	 (vindex-name (stringout base-form ".index"))	 
	 (current-pool (readlink (stringout base-form ".pool")))
	 (current-index
	  (stringout (basename current-pool ".pool") ".index"))
	 (safety (or safety-spec (guess-safety-margin vpool-name)))
	 (result #f))
    (if (> (pool-freespace current-pool) safety)
	(set! result (use-pool+ current-pool current-index))
	(textlet `#({"" "/"} (* #((char-not "/") "/"))
		    ,(basename base-form)
		    (label num (chunk (isdigit+))) ".pool")
	    current-pool
	  (notify "Creating a new actual pool for physical pool " base-form)
	  (when repack
	    (system "repack-file-pool " current-pool)
	    (system "repack-file-index " current-index))
	  (let* ((nextgen (1+ (read-from-string num)))
		 (nextbase (stringout base-form nextgen))
		 (real-pool-name (stringout base-form nextgen ".pool"))
		 (real-index-name (stringout base-form nextgen ".index"))
		 (pool (prepare-file-pool real-pool-name
					  (pool-capacity current)))
		 (index (prepare-file-index real-index-name
					    (* 4 (pool-capacity current)))))
	    (when (symbolic-link? vpool-name) (remove-file vpool-name))
	    (when (symbolic-link? vindex-name) (remove-file vindex-name))
	    (make-symbolic-link real-pool-name vpool-name)
	    (make-symbolic-link real-index-name vindex-name)
	    (set! result (use-pool+ pool index)))))
    (do-choices (file (getfiles (dirname vpool-name)))
      (when (tx-match (vector base-form '(isdigit+) ".pool") file)
	(hashtable-add! vpool-pools-table (choice result vpool-spec)
			(use-pool file)))
      (when (tx-match (vector base-form '(isdigit+) ".index") file)
	(hashtable-add! vpool-indices-table (choice result vpool-spec)
			(open-index file))))
    result))
  
(define (make-vpool vpool-spec size)
  (let* ((vpool-name (if (has-suffix ".pool" vpool-spec) vpool-spec
		       (stringout vpool-spec ".pool")))
	 (vpool-base (basename vpool-name ".pool"))
	 (vindex-name (stringout vpool-base ".index")))
    (cond ((file-exists? vpool-name)
	   (warn "The virtual pool " vpool-name " already exists"))
	  (else
	   (let* ((real-pool-name (stringout vpool-base "0.pool"))
		  (pool (make-file-pool real-pool-name size))
		  (real-index-name (stringout vpool-base "0.index"))
		  (index (make-file-index real-index-name (* size 4))))
	     (when (symbolic-link? vpool-name) (remove-file vpool-name))
	     (when (symbolic-link? vindex-name) (remove-file vindex-name))
	     (make-symbolic-link real-pool-name vpool-name)
	     (make-symbolic-link real-index-name vindex-name)
	     (use-pool+ pool index))))))

(define (prepare-file-pool filename capacity)
  (if (file-exists? filename)
      (begin (notify "Reusing the existing pool " filename)
	     (reset-file-pool filename)
	     (unless (> (pool-capacity filename) capacity)
	       (warn "Reused existing pool has capacity "
		     (pool-capacity filename) " < " capacity)))
      (make-file-pool filename capacity)))

(define (prepare-file-index filename capacity)
  (if (file-exists? filename)
      (begin (notify "Reusing the existing index " filename)
	     (remove-file filename)
	     (make-file-index filename capacity)
	     (unless (> (pool-capacity filename) capacity)
	       (warn "Reused existing pool has capacity "
		     (pool-capacity filename) " < " capacity)))
      (make-file-pool filename capacity)))

(module-export! '{make-vpool use-vpool vpool-indices vpool-pools })
