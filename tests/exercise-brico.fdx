(use-module 'brico)

(define (get-synset)
  (let ((s (random-oid brico-pool)))
    (while (empty? (get s english))
      (set! s (random-oid brico-pool)))
    s))
(define (find-similar-synsets synset)
  (choice (find-frames brico-index english (get synset english))
	  (find-frames brico-index genls (get synset genls))))
(define (check-hyponyms synset)
  (unless (empty? (get synset specls))
    (unless (empty? (choice (difference (get synset specls)
					(find-frames brico-index genls synset))
			    (difference (find-frames brico-index genls synset)
					(get synset specls))))
      (lineout "Hyponym check fails for " synset))))
(define (check-siblings synset)
  (unless (empty? (get synset genls))
    (unless (empty? (choice (difference (get (get synset genls) specls)
					(find-frames brico-index
					    genls (get synset genls)))
			    (difference (find-frames brico-index
					    genls (get synset genls))
					(get (get synset genls) specls))))
      (lineout "Sibling check fails for " synset))))
(define (nap) (flush-output) (sleep (/ (+ 1 (random 1000)) 2000)))

(define (main source (howmany 25))
  (gset! brico source) (gset! cyc source) (use-brico) (randomize!)
  (dotimes (i (parse-arg howmany))
    (printout "+") (nap) (find-similar-synsets (get-synset))
    (printout ".") (nap) (check-hyponyms (get-synset))
    (printout ".") (nap) (check-siblings (get-synset)))
  (warn "Done " howmany "...")
  (framerd-stats)
  (dotimes (i (parse-arg howmany))
    (let ((s (get-synset)))
      (printout "+") (nap) (find-similar-synsets s)
      (printout ".") (nap) (check-hyponyms s)
      (printout ".") (nap) (check-siblings s)))
  (warn "Done another " howmany "...")
  (framerd-stats))

