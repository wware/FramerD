#!/usr/local/bin/fdscript

(use-module! fdtext)

(define (discard-string? x)
  (or (not (find #\Space x)) (has-prefix "$Id:" x)
      (has-prefix {"Jan " "Feb " "Mar " "Apr " "May " "Jun "
		   "Jul " "Aug " "Sep " "Oct " "Nov " "Dec "}
		  x)))
(define (get-strings-subjob binary)
  (subjob "strings" binary))
(define (read-translations file)
  (let ((input (open-input-file file))
	(translations (make-hashtable))
	(xlation (read input)))
    (until (eof-object? xlation)
      (hashtable-set! translations
		      (car xlation) (cadr xlation))
      (set! xlation (read input)))
    translations))
(define (readline2 stream)
  (let ((x (readline stream)))
    (if (eof-object? x)
	(begin (sleep 5)
	       (let ((line (readline stream)))
		 (if (string? line)
		     (string-subst line "\\" "\\\\" )
		     line)))
	(string-subst x "\\" "\\\\"))))

(define (update-translations file binary)
  (let* ((brand-new (not (file-exists? file)))
	 (file (if brand-new (open-output-file file)
		   (fopen file "r+")))
	 (subjob (get-strings-subjob binary))
	 (existing (make-hashtable))
	 (new (make-hashtable)))    
    (set-file-encoding! file "utf-8")
    (unless brand-new
      (set! entry (read file))
      (until (eof-object? entry)
	(hashtable-set! existing (car entry) (cadr entry))
	(set! entry (read file))))
    (lineout "Current table has "
      (choice-size (hashtable-keys existing)) " translations")
    (let* ((strings-stream (subjob-output subjob))
	   (string (readline2 strings-stream)))
      (until (eof-object? string)
	(unless (or (discard-string? string)
		    (exists? (hashtable-get existing string)))
	  (lineout "New string: " string)
	  (hashtable-set! new string string))
	(set! string (readline2 strings-stream))))
    (lineout "Adding entries for "
      (choice-size (hashtable-keys new)) " additional translations")
    (do-choices (key (hashtable-keys new))
      (print (list key key) file))))
(define (main)
  (update-translations arg1 arg2))
